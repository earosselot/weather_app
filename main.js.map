{"version":3,"sources":["webpack://wheather_js/./src/weather.js","webpack://wheather_js/./src/index.js"],"names":["Weather","_city","_weather","_description","_icon","_temp","_feelsLike","_country","this","city","weather","description","icon","temp","feelsLike","country","weatherServices","cityName","data","fetchAPI","name","main","feels_like","sys","params","units","APIkey","rawData","fetch","mode","json","error","console","log","lat","long","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","createWeather","then","displayData","searchButton","document","getElementById","searchInput","tempField","weatherField","tempCardImage","cityNameField","feelsLikeField","innerText","Math","round","setAttribute","addEventListener","event","code","preventDefault","click","async","tempCardSpinner","value","style","display"],"mappings":"mBAqEA,MAAMA,EACF,YAAYC,EAAOC,EAAUC,EAAcC,EAAOC,EAAOC,EAAYC,GACjEC,KAAKC,KAAOR,EACZO,KAAKE,QAAUR,EACfM,KAAKG,YAAcR,EACnBK,KAAKI,KAAOR,EACZI,KAAKK,KAAOR,EACZG,KAAKM,UAAYR,EACjBE,KAAKO,QAAUR,GC1EvB,IAAIS,EAAkB,IDFtB,MAEI,oBAAoBC,GAChB,IAAIC,QAAaV,KAAKW,SAASF,GAS/B,OARc,IAAIjB,EACdkB,EAAKE,KACLF,EAAKR,QAAQ,GAAGW,KAChBH,EAAKR,QAAQ,GAAGC,YAChBO,EAAKR,QAAQ,GAAGE,KAChBM,EAAKG,KAAKR,KACVK,EAAKG,KAAKC,WACVJ,EAAKK,IAAIR,SAKjB,eAAgBS,EAAQC,EAAQ,UAC5B,IAAIC,EAAS,mCACb,GAAIF,EAAiB,SACjB,IACI,IAAIG,QAAgBC,MAChB,qDAAqDJ,EAAOP,kBAAkBS,WAAgBD,IAC9F,CAACI,KAAM,SAEX,aADiBF,EAAQG,OAE3B,MAAOC,GACLC,QAAQC,IAAI,WACZD,QAAQC,IAAIF,QAEb,GAAIP,EAAY,IACnB,IACI,IAAIG,QAAgBC,MAChB,uDAAuDJ,EAAOU,WAAWV,EAAOW,cAAcT,WAAgBD,IAC9G,CAACI,KAAM,SACPC,QAAaH,EAAQG,OAEzB,OADAE,QAAQC,IAAIH,GACLA,EACT,MAAOC,GACLC,QAAQC,IAAI,WACZD,QAAQC,IAAIF,MClCxBK,UAAUC,aACVD,UAAUC,YAAYC,oBAI1B,SAAyBC,GACrB,IAAIf,EAAS,GACbA,EAAY,IAAIe,EAASC,OAAOC,SAChCjB,EAAa,KAAIe,EAASC,OAAOE,UACjC1B,EAAgB2B,cAAcnB,GACzBoB,MAAMlC,IACHmC,EAAYnC,SAIxB,WAGIM,EAAgB2B,cAFH,CACb,SAAqB,eAEhBC,MAAMlC,IACHmC,EAAYnC,SAIxB,MAAMoC,EAAeC,SAASC,eAAe,iBACvCC,EAAcF,SAASC,eAAe,gBAsC5C,SAASH,EAAa3B,GAElB,MAAMgC,EAAYH,SAASC,eAAe,oBACpCG,EAAeJ,SAASC,eAAe,gBACvCI,EAAgBL,SAASC,eAAe,mBACxCK,EAAgBN,SAASC,eAAe,aACxCM,EAAiBP,SAASC,eAAe,cAE/CE,EAAUK,UAAY,GACtBL,EAAUK,UAAYC,KAAKC,MAAMvC,EAAKL,MAAQ,KAE9CsC,EAAaI,UAAY,GACzBJ,EAAaI,UAAYrC,EAAKR,QAE9B0C,EAAcM,aAAa,MAAO,cAAcxC,EAAKN,YAErDyC,EAAcE,UAAY,GAC1BF,EAAcE,UAAY,GAAGrC,EAAKT,SAASS,EAAKH,WAEhDuC,EAAeC,UAAY,GAC3BD,EAAeC,UAAY,cAAcC,KAAKC,MAAMvC,EAAKJ,eAvD7DmC,EAAYU,iBAAiB,SAAUC,IAChB,UAAfA,EAAMC,OACND,EAAME,iBACNhB,EAAaiB,YAoBrBjB,EAAaa,iBAAiB,SAASK,UACnC,MAAMC,EAAkBlB,SAASC,eAAe,qBAChD,IAAIxB,EAAS,GACbA,EAAiB,SAAIyB,EAAYiB,MACjCD,EAAgBE,MAAMC,QAAU,QAChC,IAAI1D,QAAgBM,EAAgB2B,cAAcnB,GAClDyC,EAAgBE,MAAMC,QAAU,OAChCvB,EAAYnC,O","file":"main.js","sourcesContent":["\r\nclass WeatherServices {\r\n\r\n    async createWeather(cityName) {\r\n        let data = await this.fetchAPI(cityName);\r\n        let weather = new Weather(\r\n            data.name,\r\n            data.weather[0].main,\r\n            data.weather[0].description,\r\n            data.weather[0].icon,\r\n            data.main.temp,\r\n            data.main.feels_like,\r\n            data.sys.country);\r\n        return weather\r\n    };\r\n\r\n\r\n    async fetchAPI (params, units = 'metric') {\r\n        let APIkey = '652e61acc78edad67e8910709ea3d274';\r\n        if (params['cityName']) {\r\n            try {\r\n                let rawData = await fetch(\r\n                    `https://api.openweathermap.org/data/2.5/weather?q=${params.cityName}&appid=${APIkey}&units=${units}`,\r\n                    {mode: 'cors'});\r\n                let json = await rawData.json();\r\n                return json;\r\n            } catch (error) {\r\n                console.log('error: ')\r\n                console.log(error);\r\n            }\r\n        } else if (params['lat']) {\r\n            try {\r\n                let rawData = await fetch(\r\n                    `https://api.openweathermap.org/data/2.5/weather?lat=${params.lat}&lon=${params.long}&appid=${APIkey}&units=${units}`,\r\n                    {mode: 'cors'});\r\n                let json = await rawData.json();\r\n                console.log(json);\r\n                return json;\r\n            } catch (error) {\r\n                console.log('error: ')\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n\r\n    // GetData(json){\r\n    //     let obj = {};\r\n    //     obj['weather'] = json.weather.main;\r\n    //     obj['description'] = json.weather.description;\r\n    //     obj['temp'] = json.main.temp;\r\n    //     obj['feelsLike'] = json.main.feels_like;\r\n    //     // json.main.temp_min\r\n    //     // json.main.temp_max\r\n    //     // json.main.pressure\r\n    //     // json.main.humidity\r\n    //     // json.clouds.all  // % of clouds\r\n    //     obj['city'] = json.name;  // city name\r\n    //     // json.sys.country  // country code 'AR', 'GB', 'JP', etc...\r\n    //     // json.sys.sunrise  // sunrise time, unix, UTC\r\n    //     // json.sys.sunset // sunset time, unix, UTC\r\n    //     // json.timezone  // shift in seconds form UTC\r\n    //     return obj;\r\n    // };\r\n\r\n}\r\n\r\n\r\nclass Weather {\r\n    constructor(_city, _weather, _description, _icon, _temp, _feelsLike, _country) {\r\n        this.city = _city;\r\n        this.weather = _weather;\r\n        this.description = _description;\r\n        this.icon = _icon;\r\n        this.temp = _temp;\r\n        this.feelsLike = _feelsLike;\r\n        this.country = _country;\r\n    }\r\n}\r\n\r\nexport { WeatherServices }\r\n","import {WeatherServices} from \"./weather\";\r\n\r\n// TODO: agregar loading mientras carga la API\r\nlet weatherServices = new WeatherServices();\r\n\r\n//Check if browser supports W3C Geolocation API\r\nif (navigator.geolocation) {\r\n    navigator.geolocation.getCurrentPosition(successFunction, errorFunction);\r\n}\r\n\r\n//Get latitude and longitude;\r\nfunction successFunction(position) {\r\n    let params = {};\r\n    params['lat'] = position.coords.latitude;\r\n    params['long'] = position.coords.longitude;\r\n    weatherServices.createWeather(params)\r\n        .then((weather) => {\r\n            displayData(weather);\r\n        })\r\n}\r\n\r\nfunction errorFunction() {\r\n    let params = {};\r\n    params['cityName'] = 'Montevideo';\r\n    weatherServices.createWeather(params)\r\n        .then((weather) => {\r\n            displayData(weather);\r\n        })\r\n}\r\n\r\nconst searchButton = document.getElementById('search-button');\r\nconst searchInput = document.getElementById('search-input')\r\n\r\n// Enter key behaves as click on search button\r\nsearchInput.addEventListener('keyup', (event) => {\r\n    if (event.code === \"Enter\") {\r\n        event.preventDefault();\r\n        searchButton.click();\r\n    }\r\n});\r\n\r\n// Search city request\r\n// TODO: hacer esta funcion con async-await para meterle el spinner\r\n// https://stackoverflow.com/questions/58820229/how-to-show-loading-icon-till-await-finishes\r\n// searchButton.addEventListener('click', () => {\r\n//     let params = {};\r\n//     params['cityName'] = searchInput.value;\r\n//     const tempCardSpinner = document.getElementById('temp-card-spinner');\r\n//     weatherServices.createWeather(params)\r\n//         .then((weather) => {\r\n//             tempCardSpinner.style.display = 'block';\r\n//             displayData(weather);\r\n//             tempCardSpinner.style.display = 'none';\r\n//         })\r\n// })\r\n\r\n\r\nsearchButton.addEventListener('click', async () => {\r\n    const tempCardSpinner = document.getElementById('temp-card-spinner');\r\n    let params = {};\r\n    params['cityName'] = searchInput.value;\r\n    tempCardSpinner.style.display = 'block';\r\n    let weather = await weatherServices.createWeather(params);\r\n    tempCardSpinner.style.display = 'none';\r\n    displayData(weather);\r\n})\r\n\r\n\r\n// Erases previous data on the App and renders the new data\r\nfunction displayData (data) {\r\n\r\n    const tempField = document.getElementById('temperature-text');\r\n    const weatherField = document.getElementById('weather-text');\r\n    const tempCardImage = document.getElementById('temp-card-image');\r\n    const cityNameField = document.getElementById('city-name');\r\n    const feelsLikeField = document.getElementById('feels-like');\r\n\r\n    tempField.innerText = '';\r\n    tempField.innerText = Math.round(data.temp) + '°C';\r\n\r\n    weatherField.innerText = '';\r\n    weatherField.innerText = data.weather;\r\n\r\n    tempCardImage.setAttribute('src', `design/SVG/${data.icon}.svg`);\r\n\r\n    cityNameField.innerText = '';\r\n    cityNameField.innerText = `${data.city} (${data.country})`;\r\n\r\n    feelsLikeField.innerText = '';\r\n    feelsLikeField.innerText = `Feels like ${Math.round(data.feelsLike)}°C`;\r\n}\r\n\r\n"],"sourceRoot":""}