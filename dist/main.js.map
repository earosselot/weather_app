{"version":3,"sources":["webpack://wheather_js/./src/weather.js","webpack://wheather_js/./src/index.js"],"names":["Weather","_city","_weather","_description","_temp","_feelsLike","this","city","weather","description","temp","feelsLike","weatherServices","cityName","data","fetchAPI","console","log","name","main","feels_like","units","rawData","fetch","mode","json","error","createWeather","then","resolve","mainField","document","getElementById","searchButton","searchInput","addEventListener","event","code","preventDefault","click","inputValue","value","field","innerHTML","fieldData","DOMelement","createElement","textContent","appendChild","displayField","displayData"],"mappings":"mBAgDA,MAAMA,EAEF,YAAYC,EAAOC,EAAUC,EAAcC,EAAOC,GAC9CC,KAAKC,KAAON,EACZK,KAAKE,QAAUN,EACfI,KAAKG,YAAcN,EACnBG,KAAKI,KAAON,EACZE,KAAKK,UAAYN,GChDzB,IACIO,EAAkB,IDPtB,MAEI,oBAAoBC,GAChB,IAAIC,QAAaR,KAAKS,SAASF,GAG/B,OAFAG,QAAQC,IAAIH,GACE,IAAId,EAAQc,EAAKI,KAAMJ,EAAKN,QAAQ,GAAGW,KAAML,EAAKN,QAAQ,GAAGC,YAAaK,EAAKK,KAAKT,KAAMI,EAAKK,KAAKC,YAKtH,eAAgBP,EAAUQ,EAAQ,UAE9B,IACI,IAAIC,QAAgBC,MAChB,qDAAqDV,kDAAkCQ,IACvF,CAACG,KAAM,SAEX,aADiBF,EAAQG,OAE3B,MAAOC,GACLV,QAAQC,IAAI,WACZD,QAAQC,IAAIS,MCZxBd,EAAgBe,cAFD,WAEyBC,MAAMC,GAAYb,QAAQC,IAAIY,KAGtE,MAAMC,EAAYC,SAASC,eAAe,cACpCC,EAAeF,SAASC,eAAe,iBACvCE,EAAcH,SAASC,eAAe,gBAE5CE,EAAYC,iBAAiB,SAAUC,IAChB,UAAfA,EAAMC,OACND,EAAME,iBACNL,EAAaM,YAIrBN,EAAaE,iBAAiB,SAAS,KACnC,MAAMK,EAAaN,EAAYO,MAC/B7B,EAAgBe,cAAca,GACzBZ,MAAMd,KAOf,SAAsBA,EAAM4B,GACxBA,EAAMC,UAAY,GAMtB,SAAuBC,EAAWC,GAC9B,MAAMH,EAAQX,SAASe,cAAc,OACrCJ,EAAMK,YAAcH,EACpBC,EAAWG,YAAYN,GARvBO,CAAanC,EAAKJ,KAAMgC,GARhBQ,CAAYpC,EAAMgB,U","file":"main.js","sourcesContent":["\r\nclass WeatherServices {\r\n\r\n    async createWeather(cityName) {\r\n        let data = await this.fetchAPI(cityName);\r\n        console.log(data);\r\n        let weather = new Weather(data.name, data.weather[0].main, data.weather[0].description, data.main.temp, data.main.feels_like);\r\n        return weather\r\n    };\r\n\r\n\r\n    async fetchAPI (cityName, units = 'metric') {\r\n        let APIkey = '652e61acc78edad67e8910709ea3d274';\r\n        try {\r\n            let rawData = await fetch(\r\n                `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${APIkey}&units=${units}`,\r\n                {mode: 'cors'});\r\n            let json = await rawData.json();\r\n            return json;\r\n        } catch (error) {\r\n            console.log('error: ')\r\n            console.log(error);\r\n        }\r\n\r\n    };\r\n\r\n    // GetData(json){\r\n    //     let obj = {};\r\n    //     obj['weather'] = json.weather.main;\r\n    //     obj['description'] = json.weather.description;\r\n    //     obj['temp'] = json.main.temp;\r\n    //     obj['feelsLike'] = json.main.feels_like;\r\n    //     // json.main.temp_min\r\n    //     // json.main.temp_max\r\n    //     // json.main.pressure\r\n    //     // json.main.humidity\r\n    //     // json.clouds.all  // % of clouds\r\n    //     obj['city'] = json.name;  // city name\r\n    //     // json.sys.country  // country code 'AR', 'GB', 'JP', etc...\r\n    //     // json.sys.sunrise  // sunrise time, unix, UTC\r\n    //     // json.sys.sunset // sunset time, unix, UTC\r\n    //     // json.timezone  // shift in seconds form UTC\r\n    //     return obj;\r\n    // };\r\n\r\n}\r\n\r\n\r\nclass Weather {\r\n\r\n    constructor(_city, _weather, _description, _temp, _feelsLike) {\r\n        this.city = _city;\r\n        this.weather = _weather;\r\n        this.description = _description;\r\n        this.temp = _temp;\r\n        this.feelsLike = _feelsLike;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport { WeatherServices }\r\n","import {WeatherServices} from \"./weather\";\r\n\r\n// const APIkey = '652e61acc78edad67e8910709ea3d274';\r\n// let cityName1 = 'Mendoza';\r\n// Weather(APIkey, cityName1).then((resolve) => console.log(resolve));\r\n\r\n\r\nlet cityName = 'Neuquen';\r\nlet weatherServices = new WeatherServices();\r\nweatherServices.createWeather(cityName).then((resolve) => console.log(resolve));\r\n\r\n\r\nconst mainField = document.getElementById('main-field');\r\nconst searchButton = document.getElementById('search-button');\r\nconst searchInput = document.getElementById('search-input')\r\n\r\nsearchInput.addEventListener('keyup', (event) => {\r\n    if (event.code === \"Enter\") {\r\n        event.preventDefault();\r\n        searchButton.click();\r\n    }\r\n});\r\n\r\nsearchButton.addEventListener('click', () => {\r\n    const inputValue = searchInput.value;\r\n    weatherServices.createWeather(inputValue)\r\n        .then((data) => {\r\n            displayData(data, mainField);\r\n        })\r\n})\r\n\r\n\r\n// Erases previous data on the App and renders the new data\r\nfunction displayData (data, field) {\r\n    field.innerHTML = '';\r\n    displayField(data.temp, field);\r\n}\r\n\r\n\r\n// Creates a div element and displays data within DOMelement\r\nfunction displayField (fieldData, DOMelement) {\r\n    const field = document.createElement('div');\r\n    field.textContent = fieldData;\r\n    DOMelement.appendChild(field);\r\n}\r\n\r\n\r\nconst DisplayControl = (() => {\r\n    return {}\r\n})();\r\n\r\n// Weather function hits the weather api with the parameters passed and returns an object with fields used by the App\r\n// async function Weather(APIkey, cityName, units = 'metric') {\r\n//     let rawData = await fetch(\r\n//         `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${APIkey}&units=${units}`,\r\n//         {mode: 'cors'});\r\n//     let data = await rawData.json();\r\n//     return GetData(data);\r\n// }\r\n\r\n\r\n// Get data takes the weather json in and returns an object with only the data required by the app\r\n// function GetData(json) {\r\n//     let obj = {};\r\n//     obj['weather'] = json.weather[0].main;\r\n//     obj['description'] = json.weather[0].description;\r\n//     obj['temp'] = json.main.temp;\r\n//     obj['feelsLike'] = json.main.feels_like;\r\n//     // json.main.temp_min\r\n//     // json.main.temp_max\r\n//     // json.main.pressure\r\n//     // json.main.humidity\r\n//     // json.clouds.all  // % of clouds\r\n//     obj['city'] = json.name;  // city name\r\n//     // json.sys.country  // country code 'AR', 'GB', 'JP', etc...\r\n//     // json.sys.sunrise  // sunrise time, unix, UTC\r\n//     // json.sys.sunset // sunset time, unix, UTC\r\n//     // json.timezone  // shift in seconds form UTC\r\n//     return obj;\r\n// }\r\n\r\n\r\n"],"sourceRoot":""}