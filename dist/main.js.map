{"version":3,"sources":["webpack://wheather_js/./src/weather.js","webpack://wheather_js/./src/index.js"],"names":["Weather","_city","_weather","_description","_icon","_temp","_feelsLike","this","city","weather","description","icon","temp","feelsLike","weatherServices","cityName","data","fetchAPI","name","main","feels_like","params","units","APIkey","rawData","fetch","mode","json","error","console","log","lat","long","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","createWeather","then","displayData","searchButton","document","getElementById","searchInput","tempField","weatherField","tempCardImage","innerText","Math","round","setAttribute","addEventListener","event","code","preventDefault","click","value"],"mappings":"mBA6DA,MAAMA,EAEF,YAAYC,EAAOC,EAAUC,EAAcC,EAAOC,EAAOC,GACrDC,KAAKC,KAAOP,EACZM,KAAKE,QAAUP,EACfK,KAAKG,YAAcP,EACnBI,KAAKI,KAAOP,EACZG,KAAKK,KAAOP,EACZE,KAAKM,UAAYP,GCnEzB,IAAIQ,EAAkB,IDDtB,MAEI,oBAAoBC,GAChB,IAAIC,QAAaT,KAAKU,SAASF,GAE/B,OADc,IAAIf,EAAQgB,EAAKE,KAAMF,EAAKP,QAAQ,GAAGU,KAAMH,EAAKP,QAAQ,GAAGC,YAAaM,EAAKP,QAAQ,GAAGE,KAAMK,EAAKG,KAAKP,KAAMI,EAAKG,KAAKC,YAK5I,eAAgBC,EAAQC,EAAQ,UAC5B,IAAIC,EAAS,mCACb,GAAIF,EAAiB,SACjB,IACI,IAAIG,QAAgBC,MAChB,qDAAqDJ,EAAON,kBAAkBQ,WAAgBD,IAC9F,CAACI,KAAM,SAEX,aADiBF,EAAQG,OAE3B,MAAOC,GACLC,QAAQC,IAAI,WACZD,QAAQC,IAAIF,QAEb,GAAIP,EAAY,IACnB,IACI,IAAIG,QAAgBC,MAChB,uDAAuDJ,EAAOU,WAAWV,EAAOW,cAAcT,WAAgBD,IAC9G,CAACI,KAAM,SAEX,aADiBF,EAAQG,OAE3B,MAAOC,GACLC,QAAQC,IAAI,WACZD,QAAQC,IAAIF,MC3BxBK,UAAUC,aACVD,UAAUC,YAAYC,oBAI1B,SAAyBC,GACrB,IAAIf,EAAS,GACbA,EAAY,IAAIe,EAASC,OAAOC,SAChCjB,EAAa,KAAIe,EAASC,OAAOE,UACjCzB,EAAgB0B,cAAcnB,GACzBoB,MAAMhC,IACHiC,EAAYjC,SAIxB,WAGIK,EAAgB0B,cAFH,CACb,SAAqB,eAEhBC,MAAMhC,IACHiC,EAAYjC,SAKxB,MAAMkC,EAAeC,SAASC,eAAe,iBACvCC,EAAcF,SAASC,eAAe,gBAsB5C,SAASH,EAAa1B,GAElB,MAAM+B,EAAYH,SAASC,eAAe,oBACpCG,EAAeJ,SAASC,eAAe,gBACvCI,EAAgBL,SAASC,eAAe,mBAE9CE,EAAUG,UAAY,GACtBH,EAAUG,UAAYC,KAAKC,MAAMpC,EAAKJ,MAAQ,IAE9CoC,EAAaE,UAAY,GACzBF,EAAaE,UAAYlC,EAAKP,QAE9BwC,EAAcI,aAAa,MAAO,iBAAiBrC,EAAKL,YA/B5DmC,EAAYQ,iBAAiB,SAAUC,IAChB,UAAfA,EAAMC,OACND,EAAME,iBACNd,EAAae,YAKrBf,EAAaW,iBAAiB,SAAS,KACnC,IAAIjC,EAAS,GACbA,EAAiB,SAAIyB,EAAYa,MACjC7C,EAAgB0B,cAAcnB,GACzBoB,MAAMhC,IACHiC,EAAYjC,U","file":"main.js","sourcesContent":["\r\nclass WeatherServices {\r\n\r\n    async createWeather(cityName) {\r\n        let data = await this.fetchAPI(cityName);\r\n        let weather = new Weather(data.name, data.weather[0].main, data.weather[0].description, data.weather[0].icon, data.main.temp, data.main.feels_like);\r\n        return weather\r\n    };\r\n\r\n\r\n    async fetchAPI (params, units = 'metric') {\r\n        let APIkey = '652e61acc78edad67e8910709ea3d274';\r\n        if (params['cityName']) {\r\n            try {\r\n                let rawData = await fetch(\r\n                    `https://api.openweathermap.org/data/2.5/weather?q=${params.cityName}&appid=${APIkey}&units=${units}`,\r\n                    {mode: 'cors'});\r\n                let json = await rawData.json();\r\n                return json;\r\n            } catch (error) {\r\n                console.log('error: ')\r\n                console.log(error);\r\n            }\r\n        } else if (params['lat']) {\r\n            try {\r\n                let rawData = await fetch(\r\n                    `https://api.openweathermap.org/data/2.5/weather?lat=${params.lat}&lon=${params.long}&appid=${APIkey}&units=${units}`,\r\n                    {mode: 'cors'});\r\n                let json = await rawData.json();\r\n                return json;\r\n            } catch (error) {\r\n                console.log('error: ')\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n\r\n    // GetData(json){\r\n    //     let obj = {};\r\n    //     obj['weather'] = json.weather.main;\r\n    //     obj['description'] = json.weather.description;\r\n    //     obj['temp'] = json.main.temp;\r\n    //     obj['feelsLike'] = json.main.feels_like;\r\n    //     // json.main.temp_min\r\n    //     // json.main.temp_max\r\n    //     // json.main.pressure\r\n    //     // json.main.humidity\r\n    //     // json.clouds.all  // % of clouds\r\n    //     obj['city'] = json.name;  // city name\r\n    //     // json.sys.country  // country code 'AR', 'GB', 'JP', etc...\r\n    //     // json.sys.sunrise  // sunrise time, unix, UTC\r\n    //     // json.sys.sunset // sunset time, unix, UTC\r\n    //     // json.timezone  // shift in seconds form UTC\r\n    //     return obj;\r\n    // };\r\n\r\n}\r\n\r\n\r\nclass Weather {\r\n\r\n    constructor(_city, _weather, _description, _icon, _temp, _feelsLike) {\r\n        this.city = _city;\r\n        this.weather = _weather;\r\n        this.description = _description;\r\n        this.icon = _icon;\r\n        this.temp = _temp;\r\n        this.feelsLike = _feelsLike;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport { WeatherServices }\r\n","import {WeatherServices} from \"./weather\";\r\n\r\nlet weatherServices = new WeatherServices();\r\n\r\n//Check if browser supports W3C Geolocation API\r\nif (navigator.geolocation) {\r\n    navigator.geolocation.getCurrentPosition(successFunction, errorFunction);\r\n}\r\n\r\n//Get latitude and longitude;\r\nfunction successFunction(position) {\r\n    let params = {};\r\n    params['lat'] = position.coords.latitude;\r\n    params['long'] = position.coords.longitude;\r\n    weatherServices.createWeather(params)\r\n        .then((weather) => {\r\n            displayData(weather);\r\n        })\r\n}\r\n\r\nfunction errorFunction() {\r\n    let params = {};\r\n    params['cityName'] = 'Montevideo';\r\n    weatherServices.createWeather(params)\r\n        .then((weather) => {\r\n            displayData(weather);\r\n        })\r\n}\r\n\r\n\r\nconst searchButton = document.getElementById('search-button');\r\nconst searchInput = document.getElementById('search-input')\r\n\r\n// Enter key behaves as click on search button\r\nsearchInput.addEventListener('keyup', (event) => {\r\n    if (event.code === \"Enter\") {\r\n        event.preventDefault();\r\n        searchButton.click();\r\n    }\r\n});\r\n\r\n// Search request\r\nsearchButton.addEventListener('click', () => {\r\n    let params = {};\r\n    params['cityName'] = searchInput.value;\r\n    weatherServices.createWeather(params)\r\n        .then((weather) => {\r\n            displayData(weather);\r\n        })\r\n})\r\n\r\n\r\n// Erases previous data on the App and renders the new data\r\nfunction displayData (data) {\r\n\r\n    const tempField = document.getElementById('temperature-text');\r\n    const weatherField = document.getElementById('weather-text');\r\n    const tempCardImage = document.getElementById('temp-card-image');\r\n\r\n    tempField.innerText = '';\r\n    tempField.innerText = Math.round(data.temp) + 'Â°';\r\n\r\n    weatherField.innerText = '';\r\n    weatherField.innerText = data.weather;\r\n\r\n    tempCardImage.setAttribute('src', `../design/SVG/${data.icon}.svg`);\r\n}\r\n\r\nfunction renderWeatherImage(weather, element) {\r\n    // TODO: complete al possible weather conditions and symbols\r\n    let symbol;\r\n    switch (weather) {\r\n        case 'Clear':\r\n            symbol = 'fa-sun';\r\n            break;\r\n        case 'Clouds':\r\n            symbol = 'fa-cloud';\r\n            break;\r\n        default:\r\n            symbol = 'fa-lightbulb'\r\n    }\r\n    element.classList.add(symbol);\r\n}\r\n\r\n"],"sourceRoot":""}